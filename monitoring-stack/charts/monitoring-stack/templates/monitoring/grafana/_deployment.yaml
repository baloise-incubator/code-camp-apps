{{- define "monitoring.grafana.deployment" -}}
  {{- $top := .top -}}
  {{- $configRepoName := .configRepoName -}}
  {{- $namespace := .namespace -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "monitoring.grafana.labels" . | nindent 4 }}
  name: grafana-1 # increment in case of immutable changes
  namespace: {{ $namespace }}
spec:
  progressDeadlineSeconds: 600
  replicas: {{ $top.Values.grafana.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      {{- include "monitoring.grafana.labels" . | nindent 6 }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        {{- include "monitoring.grafana.labels" . | nindent 8 }}
      annotations:
        baloise.com/restart: "1"
    spec:
      initContainers:
        - name: grafana-sc-datasources
          env:
          - name: METHOD
            value: LIST
          - name: LABEL
            value: datasource
          - name: LABEL_VALUE
            value: {{ $configRepoName }}
          - name: FOLDER
            value: /etc/grafana/provisioning/datasources
          - name: RESOURCE
            value: secret
          image: {{ $top.Values.grafana.images.sidecar }}
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 32Mi
          volumeMounts:
          - mountPath: /etc/grafana/provisioning/datasources
            name: datasource-volume
      containers:
        - name: grafana-sc-dashboard
          env:
            - name: LABEL
              value: dashboard
            - name: LABEL_VALUE
              value: {{ $configRepoName }}
            - name: FOLDER
              value: /var/lib/grafana/dashboards/general
            - name: RESOURCE
              value: configmap
          image: {{ $top.Values.grafana.images.sidecar }}
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 1
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 32Mi
          volumeMounts:
            - mountPath: /var/lib/grafana/dashboards/general
              name: dashboard-volume
        - name: grafana
          env:
            - name: GF_LOG_LEVEL
              value: info # default
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/data
            - name: GF_AUTH_BASIC_ENABLED
              value: "false"
            - name: GF_AUTH_PROXY_ENABLED
              value: "true"
            - name: GF_AUTH_PROXY_HEADER_NAME
              value: "X-Forwarded-User"
            - name: GF_AUTH_DISABLE_LOGIN_FORM
              value: "true"
            - name: GF_AUTH_DISABLE_SIGNOUT_MENU
              value: "true"
            - name: GF_AUTH_PROXY_HEADER_PROPERTY
              value: "username"
            - name: GF_USERS_AUTO_ASSIGN_ORG
              value: "true"
            - name: GF_USERS_AUTO_ASSIGN_ORG_ROLE
              value: "Admin"
            - name: GF_RBAC_PERMISSION_CACHE
              value: "false"
            - name: GF_ANALYTICS_REPORTING_ENABLED
              value: "false"
            - name: GF_ANALYTICS_CHECK_FOR_PLUGIN_UPDATES
              value: "false"
            - name: TZ
              value: "Europe/Zurich"
            - name: GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH
              value: "/var/lib/grafana/dashboards/general/team-dashboard.json"
            - name: GF_LIVE_ALLOWED_ORIGINS
              value: https://*.baloise.dev
            - name: GF_UNIFIED_ALERTING_ENABLED
              value: "false"
            - name: GF_ALERTING_ENABLED
              value: "false"
          image:  {{ $top.Values.grafana.images.grafana }}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          ports:
            - containerPort: 3000
              name: grafana-http
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {{- toYaml $top.Values.grafana.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /etc/grafana/provisioning/dashboards/
              name: grafana-dashboardproviders
            - mountPath: /var/lib/grafana/data
              name: grafana-volume
            - mountPath: /var/lib/grafana/dashboards/general
              name: dashboard-volume
            - mountPath: /etc/grafana/provisioning/datasources/
              name: datasource-volume
        - name: grafana-proxy
          args:
            - -provider=openshift
            - -https-address=:9093
            - -http-address=
            - -email-domain=*
            - -upstream=http://localhost:3000
            - '-openshift-delegate-urls={"/": {"resource": "services", "verb": "get", "name": "grafana", "namespace": "{{ $namespace }}"}}'
            - -openshift-service-account=grafana
            - -tls-cert=/etc/tls/private/tls.crt
            - -tls-key=/etc/tls/private/tls.key
            - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
            - -cookie-secret-file=/etc/proxy/secrets/session_secret
            - -openshift-ca=/etc/pki/tls/cert.pem
            - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          image: {{ $top.Values.grafana.images.oauthProxy }}
          ports:
            - containerPort: 9093
              name: web
          resources:
            requests:
              cpu: 1m
              memory: 20Mi
            limits:
              memory: 64Mi
              cpu: 250m
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /etc/tls/private
              name: secret-grafana-tls
            - mountPath: /etc/proxy/secrets
              name: secret-cookie-session-secret
      serviceAccount: grafana
      serviceAccountName: grafana
      volumes:
        - name: grafana-dashboardproviders
          configMap:
            defaultMode: 420
            name: grafana-dashboardproviders
        - emptyDir: {}
          name: grafana-volume
        - emptyDir: {}
          name: dashboard-volume
        - emptyDir: {}
          name: datasource-volume
        - name: secret-grafana-tls
          secret:
            secretName: grafana-tls
        - name: secret-cookie-session-secret
          secret:
            secretName: cookie-session-secret
{{ end }}
