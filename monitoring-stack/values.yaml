# cluster
clusterName: incubator
responsible: codecamp@baloise.dev
routeDomain: apps.baloise.dev
clusterEnvironment: nonprod
appEnvironment: nonprod
infraCluster: true

# monitoring
enableMonitoring: true
enablespringBootMonitoring: true
clusterMonitoringNamespace: platform-monitoring
alertmanager:
  mailAlerts: false
  teams:
    enabled: false
thanosQuerier:
  enableLocalClusterMonitoring: true
  clusterTargets: {}

# Loki
loki-distributed:
  global:
    dnsService: dns-default
    dnsNamespace: openshift-dns
  loki:
    podSecurityContext:
      fsGroup: 1001050000
      runAsGroup: 1001050000
      runAsUser: 1001050000
    containerSecurityContext:
      runAsUser: 1001050000
      runAsGroup: 1001050000
    schemaConfig:
      configs:
      - from: "2020-07-01"
        store: boltdb-shipper
        object_store: aws
        schema: v11
        index:
          prefix: index_
          period: 24h
  # -- Check https://grafana.com/docs/loki/latest/configuration/#storage_config for more info on how to configure storages
    storageConfig:
      aws:
        # full example: http://loki:supersecret@localhost.:9000
        s3: "http://enterprise-logs:supersecret@minio:9000"
        s3forcepathstyle: true
        endpoint: "minio:9000"
        bucketnames: "chunks"
        access_key_id: "Z6pMmr58iXDAKVqelHFe"
        secret_access_key: "uoqRcKpfJX0r2GMbiSrqtwJtNsLifeMhqcCJrEcu"
        insecure: true
      boltdb_shipper:
        active_index_directory: /data/boltdb-shipper-active
        cache_location: /data/boltdb-shipper-cache
        cache_ttl: 24h         # Can be increased for faster performance over longer query periods, uses more disk space
        shared_store: s3
  gateway:
    podSecurityContext:
      fsGroup: 1001050000
      runAsGroup: 1001050000
      runAsUser: 1001050000
    containerSecurityContext:
      runAsUser: 1001050000
      runAsGroup: 1001050000
  ingester:
    extraVolumes:
    - name: bolt-db
      emptyDir: {}
    extraVolumeMounts:
    - name: bolt-db
      mountPath: /data
  querier:
    extraVolumes:
    - name: bolt-db
      emptyDir: {}
    extraVolumeMounts:
    - name: bolt-db
      mountPath: /data
# Tempo
tempo-distributed:
  traces:
    otlp:
      grpc:
        enabled: true
  minio:
    enabled: true
    podSecurityContext:
      enabled: false
    securityContext:
      enabled: false
  tempo:
    podSecurityContext:
      fsGroup: 1001050000
    securityContext:
      runAsUser: 1001050000
      runAsGroup: 1001050000

# Pyroscope micro-services
pyroscope:
  pyroscope:
    podSecurityContext:
      fsGroup: 1001050000
    securityContext:
      runAsUser: 1001050000
      runAsGroup: 1001050000
    components:
      querier:
        kind: Deployment
        replicaCount: 3
        resources:
          limits:
            memory: 1Gi
          requests:
            memory: 256Mi
            cpu: 1
      query-frontend:
        kind: Deployment
        replicaCount: 2
        resources:
          limits:
            memory: 1Gi
          requests:
            memory: 256Mi
            cpu: 100m
      query-scheduler:
        kind: Deployment
        replicaCount: 2
        resources:
          limits:
            memory: 1Gi
          requests:
            memory: 256Mi
            cpu: 100m
      distributor:
        kind: Deployment
        replicaCount: 2
        resources:
          limits:
            memory: 1Gi
          requests:
            memory: 256Mi
            cpu: 500m
      ingester:
        kind: StatefulSet
        replicaCount: 3
        terminationGracePeriodSeconds: 600
        resources:
          limits:
            memory: 16Gi
          requests:
            memory: 8Gi
            cpu: 1
      store-gateway:
        kind: StatefulSet
        replicaCount: 3
        persistence:
          # The store-gateway needs not need persistent storage, but we still run it as a StatefulSet
          # This is to avoid having blocks of data being
          enabled: false
        resources:
          limits:
            memory: 16Gi
          requests:
            memory: 8Gi
            cpu: 1
    rbac:
      create: false
    config: |
      storage:
        backend: s3
        s3:
          endpoint: "minio:9000"
          bucket_name: "grafana-pyroscope-data"
          access_key_id: "Z6pMmr58iXDAKVqelHFe"
          secret_access_key: "uoqRcKpfJX0r2GMbiSrqtwJtNsLifeMhqcCJrEcu"
          insecure: true
  agent:
    enabled: false
  minio:
    enabled: false

# jaeger
jaeger:
  tag: 1.46
  collector:
    extraEnv:
      - name: COLLECTOR_OTLP_ENABLED
        value: 'true'
  storage:
    type: elasticsearch
  provisionDataStore:
    cassandra: false
    elasticsearch: true
  elasticsearch:
    sysctlInitContainer:
      enabled: false
    securityContext:
      runAsUser: 1001050000
    podSecurityContext:
      fsGroup: 1001050000
      runAsUser: 1001050000
  hotrod:
    enabled: true
    extraArgs:
      - --otel-exporter=otlp
    extraEnv:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://monitoring-stack-opentelemetry-collector:4318

# OpenTelemetry Collector
opentelemetry-collector:
  mode: deployment
  serviceMonitor:
    enabled: true
  config:
    exporters:
      jaeger:
        endpoint: "http://monitoring-stack-jaeger-collector:14250"
        tls:
          insecure: true
      prometheus:
        endpoint: "0.0.0.0:8889"
    processors:
      batch:
      spanmetrics:
        metrics_exporter: prometheus
    receivers:
      otlp:
        protocols:
          http:
            endpoint: "0.0.0.0:4318"
          grpc:
            endpoint: "0.0.0.0:4317"
      otlp/spanmetrics:
        protocols:
          grpc:
            endpoint: "localhost:65535"
    service:
      pipelines:
        traces:
          receivers:
            - otlp
          processors:
            - spanmetrics
            - batch
          exporters:
            - jaeger
        metrics:
          receivers:
            - otlp/spanmetrics
          processors:
            - batch
          exporters:
            - prometheus

#Promtail
promtail:
  config:
    clients:
      - url: http://monitoring-stack-loki-distributed-distributor.monitoring-stack.svc:3100/loki/api/v1/push

  rbac:
    create: false
  podSecurityContext: {}
  containerSecurityContext:
    privileged: true
    allowPrivilegeEscalation: true

# perses
perses:
  image:
    repository: persesdev/perses
    tag: latest
  args:
    - -config=/perses/config/config.yaml
  volumeMounts:
    - mountPath: /perses/storage
      name: perses-storage
    - mountPath: /perses/config
      name: perses-config
  volumes:
    - name: perses-config
      configMap:
        name: perses-config
    - name: perses-storage
      emptyDir: {}

# Grafana agent Faro
grafana-agent-faro:
  image:
    repository: grafana/agent
    tag: main
  command:
    - '/bin/grafana-agent'
    - '-config.file=/etc/agent-config/agent.yaml'
    - '-config.expand-env'
    - '-config.enable-read-api'
    - '-enable-features=integrations-next'
  network:
    http:
      containerPort: 8080
      ingress:
        host: monitroing-stack-faro-http.apps.baloise.dev
    agent:
      containerPort: 12345
      servicePort: 12345
      ingress:
        host: monitroing-stack-faro-agent.apps.baloise.dev
    appreceiver:
      containerPort: 8027
      servicePort: 8027
      ingress:
        host: monitroing-stack-faro-agent-app-receiver.apps.baloise.dev
    otelreceiver:
      containerPort: 4317
      servicePort: 4317
      ingress:
        host: monitroing-stack-faro-agent-otel-receiver.apps.baloise.dev
  volumeMounts:
    - mountPath: /var/log
      name: grafana-agent-faro-logs
    - mountPath: /etc/agent-config
      name: grafana-agent-faro-config
  volumes:
    - name: grafana-agent-faro-config
      configMap:
        name: grafana-agent-faro-config
    - name: grafana-agent-faro-logs
      emptyDir: {}

oncall:
  base_url: monitroing-stack-oncall.apps.baloise.dev
  ingress:
    enabled: true
    annotations:
      route.openshift.io/termination: "edge"
  ingress-nginx:
    enabled: false
  cert-manager:
    enabled: false
  service:
    enabled: true
    type: NodePort
    port: 8080
    nodePort: 30001
  grafana:
    enabled: false
  externalGrafana:
    url: http://grafana:9093
  database:
    # can be either mysql or postgresql
    type: postgresql
  mariadb:
    enabled: false
  postgresql:
    enabled: false
  externalPostgresql:
    host: aa
    port: 5432
    db_name: oncall
    user: oncall
    password: "oncall-password"
  rabbitmq:
    enabled: false
  externalRabbitmq:
    host:
    port:
    user:
    password:
    protocol:
    vhost:
  redis:
    enabled: false
  externalRedis:
    protocol:
    host:
    port:
    database:
    username:
    password:
  ui:
    enabled: true
  securityContext:
    runAsUser: 1001050000
  podSecurityContext:
    fsGroup: 1001050000
    runAsUser: 1001050000
postgresql:
  auth:
    postgresPassword: "oncall-password-admin"
    username: "oncall"
    password: "oncall-password"
    database: "oncall"
  primary:
    persistence:
      enabled: true
    podSecurityContext:
      fsGroup: 1001050000
      runAsUser: 1001050000