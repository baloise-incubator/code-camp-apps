# cluster
clusterName: incubator
responsible: codecamp@baloise.dev
routeDomain: apps.baloise.dev
clusterEnvironment: nonprod
appEnvironment: nonprod
infraCluster: true

# monitoring
enableMonitoring: true
enablespringBootMonitoring: true
clusterMonitoringNamespace: platform-monitoring
alertmanager:
  mailAlerts: false
  teams:
    enabled: false
thanosQuerier:
  enableLocalClusterMonitoring: true
  clusterTargets: {}

# Loki
loki-distributed:
  global:
    dnsService: dns-default
    dnsNamespace: openshift-dns
  loki:
    podSecurityContext:
      fsGroup: 1001050000
      runAsGroup: 1001050000
      runAsUser: 1001050000
    containersecurityContext:
      runAsUser: 1001050000
      runAsGroup: 1001050000
    schemaConfig:
      configs:
      - from: "2020-07-22"
        store: boltdb-shipper
        object_store: aws
        schema: v11
        index:
          prefix: loki_index_
          period: 24h
  # -- Check https://grafana.com/docs/loki/latest/configuration/#storage_config for more info on how to configure storages
    storageConfig:
      aws:
        # full example: http://loki:supersecret@localhost.:9000
        s3: http://enterprise-logs:supersecret@minio:9000
        s3forcepathstyle: true
      boltdb_shipper:
        active_index_directory: /loki/boltdb-shipper-active
        cache_location: /loki/boltdb-shipper-cache
        cache_ttl: 24h         # Can be increased for faster performance over longer query periods, uses more disk space
        shared_store: s3
  gateway:
    podSecurityContext:
      fsGroup: 1001050000
      runAsGroup: 1001050000
      runAsUser: 1001050000
    containersecurityContext:
      runAsUser: 1001050000
      runAsGroup: 1001050000

# Tempo
tempo-distributed:
  traces:
    otlp:
      grpc:
        enabled: true
  minio:
    enabled: true
    podSecurityContext:
      enabled: false
    securityContext:
      enabled: false
  tempo:
    podSecurityContext:
      fsGroup: 1001050000
    securityContext:
      runAsUser: 1001050000
      runAsGroup: 1001050000

# Pyroscope micro-services
pyroscope:
  pyroscope:
    podSecurityContext:
      fsGroup: 1001050000
    securityContext:
      runAsUser: 1001050000
      runAsGroup: 1001050000
    components:
      querier:
        kind: Deployment
        replicaCount: 3
        resources:
          limits:
            memory: 1Gi
          requests:
            memory: 256Mi
            cpu: 1
      query-frontend:
        kind: Deployment
        replicaCount: 2
        resources:
          limits:
            memory: 1Gi
          requests:
            memory: 256Mi
            cpu: 100m
      query-scheduler:
        kind: Deployment
        replicaCount: 2
        resources:
          limits:
            memory: 1Gi
          requests:
            memory: 256Mi
            cpu: 100m
      distributor:
        kind: Deployment
        replicaCount: 2
        resources:
          limits:
            memory: 1Gi
          requests:
            memory: 256Mi
            cpu: 500m
      ingester:
        kind: StatefulSet
        replicaCount: 3
        terminationGracePeriodSeconds: 600
        resources:
          limits:
            memory: 16Gi
          requests:
            memory: 8Gi
            cpu: 1
      store-gateway:
        kind: StatefulSet
        replicaCount: 3
        persistence:
          # The store-gateway needs not need persistent storage, but we still run it as a StatefulSet
          # This is to avoid having blocks of data being
          enabled: false
        resources:
          limits:
            memory: 16Gi
          requests:
            memory: 8Gi
            cpu: 1
    rbac:
      create: false
    config: |
      storage:
        backend: s3
        s3:
          endpoint: "minio:9000"
          bucket_name: "grafana-pyroscope-data"
          access_key_id: "Z6pMmr58iXDAKVqelHFe"
          secret_access_key: "uoqRcKpfJX0r2GMbiSrqtwJtNsLifeMhqcCJrEcu"
          insecure: true
  agent:
    enabled: false
  minio:
    enabled: false

# jaeger
jaeger:
  storage:
    type: elasticsearch
  provisionDataStore:
    cassandra: false
    elasticsearch: true
  elasticsearch:
    sysctlInitContainer:
      enabled: false
    securityContext:
      fsGroup: 1001050000
      runAsUser: 1001050000
    podSecurityContext:
      fsGroup: 1001050000
      runAsUser: 1001050000

# OpenTelemetry Collector
opentelemetry-collector:
  mode: deployment
  config:
    receivers:
      jaeger:
        protocols:
          grpc:
            endpoint: monitoring-stack-jaeger-collector.svc:14250
          thrift_http:
            endpoint: monitoring-stack-jaeger-collector.svc:14268
          thrift_compact:
            endpoint: monitoring-stack-jaeger-agent.svc:6831      
      prometheus: null
      zipkin: null
    service:
      pipelines:
        traces:
          receivers:
            - otlp
        metrics: null
        logs: null
